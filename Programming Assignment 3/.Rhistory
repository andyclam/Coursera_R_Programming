allMPG
mean(allMPG)
sampMeanMPG <- mean(allMP)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG-12.0)/sqrt(sampVarMPG/n)
library("swirl")
swirl()
exit()
quit()
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
x(1.1, 9, 3.14)
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
swirl()
myDF <- n-1
tStat
myDF
?pt
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative = "two.sided")
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Andy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", seq = " ")
paste("Hello", "world!", sep = " ")
?paste
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my-Na
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
hw1_data <- read.csv("~/GitHub/R-Programming/rprog-data-quiz1_data/hw1_data.csv")
View(hw1_data)
rbind(c(1,3,5),c(3,2,10))
x<- list(2,"a","b", TRUE)
x[1]
x[[1]]
class(x[1])
class[[1]]
class(x[[1]])
c(1:4)-2
c(1:4)+2
x <- c(3,5,1,10,12,6)
x[x>=6] <- 0
x <- c(3,5,1,10,12,6)
x[x %in% 1:5]
?`%'
'
)
?
a
e
?
%
'
%'
clear
[[
]
''
"
""
restart
names(hw1_data)
hw1_data[1:2,]
length(hw1_data)
nrow(hw1_data)
hw1_data[c(152,153)]
hw1_data[c(152,153),]
hw1_data[47]
hw1_data[47,]
is.na(hw1_data[,1])
sum(is.na(hw1_data[,1]))
mean(!is.na(hw1_data[,1]))
!is.na(hw1_data[,1]))
!(is.na(hw1_data[,1])))
hw1_data[!is.na(hw1_data[,1]))]
hw1_data[!is.na(hw1_data[,1])]
mean(hw1_data[!is.na(hw1_data[,1])])
is.na(hw1_data[,1]))
is.na(hw1_data[,1])
!is.na(hw1_data[,1])
has_val <- !is.na(hw1_data[,1])
mean(hw1_data[has_val, 1])
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
nxt()
nxt()
x[c(3,5,7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[,1]>31
hw1_data[,4] >90
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
question <- hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
question
question <- hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
ozone <- hw1_data[,1]>31
temp <- hw1_data[,4]>90
question <- hw1_data[ozone & temp]
hw1_data[ozone]
question <- hw1_data[ozone & temp,]
question
question <- hw1_data[,ozone & temp]
ozone
question <- hw1_data[,ozone]
question <- hw1_data[ozone,]
question
ozone <- hw1_data[,1]>31
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[hw1_data[,1]>31,]
ozone <- hw1_data[hw1_data[,1]>31, & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31 & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[,1]>31
ozone
ozone <- hw1_data[!is.na(hw1_data)]
ozone
ozone <- ozone > 31
ozone
install.packages(c("DBI", "devtools", "jsonlite", "mime", "Rcpp", "testthat"))
x <- 10
y <- 6
x+y
a <- "andy"
b<-"10"
x+b
b<-x
x+b
g<-5
x+g
x*g
x/g
multiplier <- function(x, y){
result <- x*y
print(result)
}
?na.rm
?na
?rm
multiplier(2, 4)
division <- function(x, y){
result <- x/y
result
}
division(8, 4)
division(10, 2)
division(2, 5)
thames <- 346
severn <- 354
severn - thames
severn / thames
f <- c(1,2,3,4,5)
class(f)
f+4
g <- f / 2
f + g
multiplier(f, 2)
1:20
seq(1:20, 2)
seq(from = 0, to = 10, by = 2.5)
?seq
?seq_along
seq(from = 10, by = 3, length = 5)
mydata <- data.frame(x = 101:110, y = seq(from = 51, by = 2.5, length = 10))
View(mydata)
?data.frame
mydata <- data.frame(x = 101:109, y = seq(from = 51, by = 2.5, length = 10))
m <- data.frame(f, d)
d <- c(1,4,10,16,18)
m <- data.frame(f, d)
m
mydata[2,2]
mydata[3,2]
mydata[,2]
mydata[,1]
as.data.frame(mydata[,1])
data.frame(mydata[,1])
?as
as.data.frame(mydata[6:10, 2])
as.data.frame(mydata[6:10, 1])
mydata$x[4]
as.data.frame(mydata$x)
mydata$x
mydata$x[c(6,10)]
mydata$x[-5]
new_array <- seq(from = 100, length = 50, by = 7.505)
lgenth(new_array)
length(new_array)
new_array[lgenth(new_array)]
new_array[length(new_array)]
last(new_array, 1)
tail(new_array, 1)
sunspot <- data.frame(Year = 1700:1700+length(sunspot.year), sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:(1700+length(sunspot.year)), sunspot.year)
sunspot <- data.frame(Year = 1700:1988, sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:1988, Sunspot.Count = sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:(1700+length(sunspot.year)-1), sunspot.year)
View(sunspot)
head(sunspot)
tail(sunspot)
?head
any(sunspot <= 0)
which(sunspot <= 0)
which(sunspot[,2] <= 0)
which(sunspot[,2] <= 0)
any(sunspot[,2] <= 0)
sunspot_int <- round(sunspot[,2], 0)
View(sunspot_int)
sunspot_int <- round(sunspot, 0)
View(sunspot_int)
any(sunspot_int[,2]<0)
any(sunspot_int[,1]<1700)
any(sunspot_int[,1]<1700 | sunspot_int[,1]>1988)
sunspot_int[which(sunspot_int <= 1700)]
sunspot_int[which(sunspot_int[,1] <= 1700)]
which(sunspot_int[,2] == 67)
sunspot_int[which(sunspot_int[,2] == 67)]
sunspot_int[c(which(sunspot_int[,2] == 67))]
sunspot_int[which(sunspot_int[,2] == 67)]
sunspot_int[which(sunspot_int[,2] == 67)]
which(sunspot_int[,2] == 67)
sunspot[c(which(sunspot_int[,2] == 67)),]
sunspot_int[c(which(sunspot_int[,2] == 67)),]
sunspot_int[c(which(sunspot_int[,2] == 67)),1]
as.data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1])
data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1])
meanCol(sunspot_int[,2])
mean(sunspot_int[,2])
summary(sunspot_int)
class(as.data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1]))
head(airquality)
?dataset
data()
mean(airquality$Solar.R)
mean(airquality$Solar.R[!is.na(airquality$Solar.R)))
mean(airquality$Solar.R[!is.na(airquality$Solar.R))
mean(airquality$Solar.R[!is.na(airquality$Solar.R)])
any(is.na(airquality))
mean(airquality$Solar.R[!is.na(airquality$Solar.R)])
mean(airquality[,2], na.rm=TURE)
mean(airquality[,2], na.rm=TRUE)
?na
?rm
complete(airquality)
air_clean <-  na.omit(airquality)
View(air_clean)
head(air_clean)
summart(air_clean)
summary(air_clean)
summart(airquality)
summary(airquality)
which(airquality[,2]==NA)
which(is.na(airquality[,2]))
airquality[which(is.na(airquality[,2])),]
?complete
??complete
summary(airquality$Solar.R)
a <- 10
b < - 11
b <- 11
if(a < b){
print(TRUE)
}
if(a<b){
print(TRUE)
else{
if(a<b){
print(TRUE)
else
if(a<b){
print("a is less than b")}
a <- 12
if(a<b){
print("a is less than b")}
if(a<b){
print("a is less than b")}
if(a<b){
print("a is less than b")
else(
if(a<b){
a
}
a <- 1
if(a<b){
print("a is less than b")
}
?paste
if(a<b){
paste(a, "is less than", b, sep= " ")
}
paste(1:12, sep = " ")
class(paste(1:12, sep = " "))
sum(1:3)
sqrt(50)
if(sum(1:3) >= sqrt(50)){
print("statement is true")
}else{
print("statement is false")}
source('~/GitHub/R-Programming/complete.R', echo=TRUE)
?source
ifelse(a<b, "Statement is true", "Statement is false")
?ifelse
barplot(VADeaths)
View(VADeaths)
summary(VADeaths)
plot(air_clean)
?plot
plot(air_clean)
plot(air_clean$Wind, air_clean$Solar.R)
plot(air_clean$Wind, air_clean$Solar.R, pch = 16)
?plot
plot(air_clean$Wind, air_clean$Solar.R, pch = 10)
plot(air_clean$Wind, air_clean$Solar.R, pch = 1)
plot(air_clean$Wind, air_clean$Solar.R, pch = 18)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 1)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 2)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, color = green)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, color = "green")
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, col = "green")
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, col = "blue")
?plot
abline(lm(air_clean$Wind~air_clean$Solar.R))
?abline
abline(lm(air_clean$Wind,air_clean$Solar.R))
abline(lm(air_clean$Solar.R~air_clean$Wind))
?lm
View(airquality)
?mean
mean(airquality$Ozone, na.rm = TRUE)
any(is.na(airquality$Temp))
?ls
rm(ls())
rm(list = ls())
?abline
which(airquality$Wind < 4)
count(which(airquality$Wind < 4))
??count
length(which(airquality$Wind < 4))
?any
?na
length((airquality$Wind < 4)
)
length(airquality$Wind < 4)
length(airquality$Wind > 4)
length(airquality$Wind >= 4)
length(which(airquality$Wind < 4))
length(which(airquality$Wind <= 4))
nrow(airquality)
getwd()
setwd('C:/Users/Andy/Documents/GitHub/')
files.list()
file.list()
list.file()
list.files()
setwd('C:/Users/Andy/Documents/GitHub/R-Programming')
list.files()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
}\
## 'directory' is a character vector of length 1 indicating
rm(ls())
rm(list())
rm(list(lm)))
getwd()
setwd('~/Programming Assignment 2')
setwd(paste(getwd, '/Programming Assignment 2', sep = ""))
setwd(paste(getwd(), '/Programming Assignment 2', sep = ""))
setwd(paste(getwd(), '/Programming Assignment 2'))
setwd("~/GitHub/R-Programming/Programming Assignment 3")
setwd(paste(getwd(), '/Programming Assignment 3'))
getwd()
list.files()
overcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rm(overcome)
head(outcome)
ncol(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
which(is.na(outcome$State))
any(is.na(outcome$State))
any(is.na(outcome$outcome))
?STATE
?STATES
?LETTERS
?min
View(outcome)
?mapply
?tapply
?apply
names(outcome)
summary(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
