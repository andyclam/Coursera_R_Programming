m <- solve(x) %*% x
x$setInverse(result)
m
}
makeCacheMatrix(indenty)
inversed <- cacheSolve(indenty)
cacheSolve(indenty)
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cache data")
return(m)
}
data <- x$get()
m <- solve(x) %*% x
x$setInverse(m)
m
}
cacheSolve(indenty)
indenty <- makeCacheMatrix(indenty)
cacheSolve(indenty)
solution <- cacheSolve(indenty)
source("cachematrix.R")
>    amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
>    amatrix$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
m <<- inverse
}
getInverse <- function(){
m
}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cache data")
return(m)
}
data <- x$get()
m <- solve(x) %*% x
x$setInverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cache data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setInverse(m)
m
}
amatrix$get()
cacheSolve(amatrix)
?solve
solution <- solve(matrix(c(1,2,3,4), nrow=2, ncol=2))
solution
cacheSolve(amatrix)
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message("getting cache data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
}
cacheSolve(amatrix)
cacheSolve(amatrix)
m$set(matrix(c(1,2,3,6,5,4,9,7,8),3,3,byrow=T))
amatrix$set(matrix(c(1,2,3,6,5,4,9,7,8),3,3,byrow=T))
cacheSolve(amatrix)
cacheSolve(amatrix)
library("swirl")
swirld()
swirl()
x
quit()
library("Swirl"
)
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y < - x[!is.na(x)]
y <\- x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector = c(1:20)
my_vector = 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
?dim
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "Rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) < cnames
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
quit()
library("swirl")
swirl()
class(flags)
cls_list <- lapply(flags, class)
?lapply
cls_list
class(cls_list)
as.character(cls_list)
class(as.character(cls_list))
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag,colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapple(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23[
flag_shapes <- flags[, 19:23[]
flag_shapes <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unqiue)
unique_vals <- lapply(flags, unique)
unique_vals
?unqiue
?unique
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
nxt()
cars
dataset$variable
cars$mpgCity
myMPG <- cars$mpg@City
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
mode(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
35-18
install_from_swirl("Getting_and_Clearning_Data")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Regression_Models")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
swirl()
10
25
4
summary(cars$price)
mycars
mtcars
allMPG <- mtcars@mpg
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMP)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG-12.0)/sqrt(sampVarMPG/n)
library("swirl")
swirl()
exit()
quit()
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
x(1.1, 9, 3.14)
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
swirl()
myDF <- n-1
tStat
myDF
?pt
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative = "two.sided")
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Andy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", seq = " ")
paste("Hello", "world!", sep = " ")
?paste
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library("swirl")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my-Na
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
hw1_data <- read.csv("~/GitHub/R-Programming/rprog-data-quiz1_data/hw1_data.csv")
View(hw1_data)
rbind(c(1,3,5),c(3,2,10))
x<- list(2,"a","b", TRUE)
x[1]
x[[1]]
class(x[1])
class[[1]]
class(x[[1]])
c(1:4)-2
c(1:4)+2
x <- c(3,5,1,10,12,6)
x[x>=6] <- 0
x <- c(3,5,1,10,12,6)
x[x %in% 1:5]
?`%'
'
)
?
a
e
?
%
'
%'
clear
[[
]
''
"
""
restart
names(hw1_data)
hw1_data[1:2,]
length(hw1_data)
nrow(hw1_data)
hw1_data[c(152,153)]
hw1_data[c(152,153),]
hw1_data[47]
hw1_data[47,]
is.na(hw1_data[,1])
sum(is.na(hw1_data[,1]))
mean(!is.na(hw1_data[,1]))
!is.na(hw1_data[,1]))
!(is.na(hw1_data[,1])))
hw1_data[!is.na(hw1_data[,1]))]
hw1_data[!is.na(hw1_data[,1])]
mean(hw1_data[!is.na(hw1_data[,1])])
is.na(hw1_data[,1]))
is.na(hw1_data[,1])
!is.na(hw1_data[,1])
has_val <- !is.na(hw1_data[,1])
mean(hw1_data[has_val, 1])
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
nxt()
nxt()
x[c(3,5,7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[,1]>31
hw1_data[,4] >90
hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
question <- hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
question
question <- hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
ozone <- hw1_data[,1]>31
temp <- hw1_data[,4]>90
question <- hw1_data[ozone & temp]
hw1_data[ozone]
question <- hw1_data[ozone & temp,]
question
question <- hw1_data[,ozone & temp]
ozone
question <- hw1_data[,ozone]
question <- hw1_data[ozone,]
question
ozone <- hw1_data[,1]>31
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[hw1_data[,1]>31,]
ozone <- hw1_data[hw1_data[,1]>31, & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31 & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[,1]>31
ozone
ozone <- hw1_data[!is.na(hw1_data)]
ozone
ozone <- ozone > 31
ozone
install.packages(c("DBI", "devtools", "jsonlite", "mime", "Rcpp", "testthat"))
cube <- function(x, n){
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
f <- function(x) {
print g
g <- function(y) {
y + z
}
print g
z <- 4
x + g(x)
}
f <- function(x) {
print(g)
g <- function(y) {
y + z
}
print(g)
z <- 4
x + g(x)
}
z<-10
f(3)
f <- function(x) {
print(y)
g <- function(y) {
y + z
}
print(y)
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
setwd("C://Users//Andy//Documents//GitHub//R-Programming")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
